const func = require('../index');
const assert = require('assert');
const md5 = require('md5');
const moment = require('moment');

//throwError

//throwErrorWithMissingParam

//ODError

//configResponseWithMessage
describe('configResponseWithMessage()', () => {
    it('should check if message is correct', () => {
        const testConfigResponseWithMessage = {
            status: false,
            message: 'REQUEST FAILED',
        } 
        const configResponseWithMessage = func.configResponseWithMessage("REQUEST FAILED");   
        assert.equal(JSON.stringify(testConfigResponseWithMessage), JSON.stringify(configResponseWithMessage));
    })
})

//configOneHourLaterTime()
describe('configOneHourLaterTime()', () => {
    it('should get one hour later from the moment right now', () => {
        assert(func.configOneHourLaterTime())
    })
})

//configSuccess
describe('configSuccess()', () => {
    it('should check if the config is correct', () => {
        const testConfigSuccess = {
            status: true,
            message: 'REQUEST SUCCEED',
            user_info: { "name": "yili" },
            payload: {"name": "Ellen"}
        } 
        const configSuccess = func.configSuccess({"name": "Ellen"}, 'REQUEST SUCCEED', {"name": "yili"});     
        assert.equal(JSON.stringify(testConfigSuccess), JSON.stringify(configSuccess));
    })
})

//configFail
describe('configFail()', () => {
    it('should check if the config is correct', () => {
        const testConfigFail = {
            status: false,
            message: "REQUEST FAILED"
        }
        const configFail = func.configFail("REQUEST FAILED");
        assert.equal(JSON.stringify(testConfigFail),JSON.stringify(configFail));
    })
})

//verifyUTCTime()
describe('verifyUTCTime()', () => {
    it('if the given time is after the moment right now', () => {
        assert(func.verifyUTCTime("20200620"));
    })
})
  
//getMagicNum()

//seeFirstArrayIncludeSecond()
describe('seeFistArrayIncludeSecond()', () => {
    it('should check if first array include second', ()=>{
         const result_boolean = func.seeFirstArrayIncludeSecond([1,2,3],[1,2]);   
         assert(result_boolean);
    })
});

//checkKeysExist()
describe('checkKeysExist()', () =>{
    it('should check if key exists', () =>{
        const result = func.checkKeysExist(["age"],{"age": 18, "major": "cs"});
        assert(!result);
    })
})

//doesArrayContainsSubarray()
describe('doesArrayContainsSubarray()', () => {
    it('should check if array contains subarray', () =>{
        const result =func.doesArrayContainsSubarray([1,2,3],[1,2])
        assert(result);
    })
})

//generateNonce()

//generateUniqueTimedToken()

//generateUniqueTimedFilename

//encodeUnify
describe('encodeUnify', () => {
    it('should return a 32 digits hash', () => {
        assert.equal('7b50129ab3417fd37106c433b810788e', func.encodeUnify(1,2));
    })
})

//encodeStatic()
describe('encodeStatic()', () => {
    it('get encode static', () => {
        const result = func.encodeStatic(12, 34);
        assert.equal('9a1fae201de604af70f5967ae9e8138f', result);
    })
})


//checkIllegalKey()
describe('checkIllegalKey()', () => {
    it('check if keys is in pack', () =>{
        const result = func.checkIllegalKey("name", {name: "yili", age: 18});
        assert.equal("age",result);
    })
})

//checkMissing(obj)
describe('checkMissing(obj)', () => {
    it('if the object is missing', () =>{
        assert.equal(undefined, func.checkMissing("name",{age:18}));
    })
});

//checkMissingParam()
describe('checkMissingParam()', () => {
    it('should check if the param is missing in pack', () => {
        assert(!func.checkMissingParam({name: "yili", age:18}, ['name']))
    })
})


