const packageJSON = require('../../package.json');
const moment = require('moment');
const md5 = require('md5');

// -----------------------------throwError-----------------------------
function throwError(msg = 'UNKNOWN ERROR CAPTURED', status = 500) {
    let projectCode = 'unknown-project'
    if (packageJSON.project_code) { projectCode = packageJSON.project_code }
    throw new ODError(`${projectCode} - ${msg.toUpperCase()}`, status, `Error captured in ${projectCode}, file ${getCallerFileName()}, function ${getCallerFunctionName()}, line-${getCallerLineNum()}`);
}

// ----------------------throwErrorWithMissingParam------------------------
function throwErrorWithMissingParam(param, status = 404) {
    let projectCode = 'unknown-project'
    if (packageJSON.project_code) { projectCode = packageJSON.project_code }
    throw new ODError(`${projectCode} - Missing ${param.toUpperCase()}`, status, `Error captured in ${projectCode}, file ${getCallerFileName()}, function ${getCallerFunctionName()}, line-${getCallerLineNum()}`);
}

class ODError extends Error {
    constructor(message, status, location) {
        super(message);
        this.status = status;
        this.location = location;
    }
}

function getCallerFileName() { const result = getCallerErrorStack()[1].getFileName(); return result.substring(result.lastIndexOf('/') + 1); }
function getCallerFunctionName() { return getCallerErrorStack()[1].getFunctionName(); }
function getCallerLineNum() { return getCallerErrorStack()[1].getLineNumber(); }
function getCallerErrorStack() {
    var orig = Error.prepareStackTrace;
    Error.prepareStackTrace = function (_, stack) { return stack; };
    var err = new Error;
    Error.captureStackTrace(err, arguments.callee.caller);
    var stack = err.stack;
    Error.prepareStackTrace = orig;
    return stack;
}

// -----------------------------configResponseWithMessage-----------------------------
const configResponseWithMessage = (msg) => {
    return {
        status: false,
        message: msg
    };
};

// -----------------------------configOneHourLaterTime-----------------------------
const configOneHourLaterTime = () => {
    return moment.utc().add({
        minutes: 60
    }).format("YYYY-MM-DD HH:mm:ss");
};

// -----------------------------configSuccess-----------------------------
const configSuccess = (payload, msg = 'REQUEST SUCCEED', userInfo = {}) => {
    return {
        status: true,
        message: msg,
        user_info: userInfo,
        payload: payload
    };
};

// -----------------------------configFail-----------------------------
const configFail = (msg = 'REQUEST FAILED') => {
    return {
        status: false,
        message: msg
    };
};

// -----------------------------verifyUTCTime-----------------------------
const verifyUTCTime = (aTime) => {
    let valid_date = moment(aTime).utc();
    let flag = false;
    if (valid_date.isAfter(moment().utc()) === true) {
        flag = true;
    }
    return flag;
};

// -----------------------------getMagicNum-----------------------------
const getMagicNum = () => {
    return Math.floor(Math.random() * 25020);
};

// -----------------------------seeFirstArrayIncludeSecond-----------------------------
const seeFirstArrayIncludeSecond = (arrFirst, arrSecond) => {
    for (let i = 0; i < arrSecond.length; i++) {
        const ele = arrFirst[i];
        if (arrFirst.indexOf(ele) < 0) return false;
    }
    return true;
};

// -----------------------------checkKeysExist-----------------------------
const checkKeysExist = (keys, pack) => {
    for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (!pack[key]) return key;
    }
    return false;
};

// -----------------------------doesArrayContainsSubarray-----------------------------
function doesArrayContainsSubarray(superset, subset) {
    if (0 === subset.length) { return false }
    return subset.every(function (value) {
        return (superset.indexOf(value) >= 0)
    })
}

// -----------------------------generateNonce-----------------------------
function generateNonce(length = 32) {
    if (length <= 0) { length = 32 } // max length is 32 according to QQPay's docs
    let nonce = ""
    const possibleRange = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    for (let i = 0; i < length; i++) {
        nonce += possibleRange.charAt(Math.floor(Math.random() * possibleRange.length))
    }
    return nonce
}

// -----------------------------generateUniqueTimedToken-----------------------------
function generateUniqueTimedToken(length) {
    if (!length) { length = 32 }
    if (length <= 0) { length = 32 }
    let nonce = generateNonce(length - 14) // 14 is the length of the date string. i.e. YYYYMMDDhhmmss
    const now = moment().format('YYYYMMDDhhmmss')
    const token = nonce + now
    return token.toUpperCase()
}

// -----------------------------generateUniqueTimedFilename-----------------------------
function generateUniqueTimedFilename(id) {
    const hash = md5(id)
    const now = moment().format('YYYYMMDDhhmmss')
    const result = hash + now
    return result
}

// ---------------------------------------encodeUnify-----------------------------------
const encodeUnify = (pk, salt) => {
    return md5(moment.utc().date() + salt + pk);
};

// ---------------------------------------encodeStatic----------------------------------
const encodeStatic = (org, salt) => {
    return md5(org + 'sd' + salt);
};

// -----------------------------------checkIllegalKey-----------------------------------
const checkIllegalKey = (keys, pack) => {
    const packKeys = Object.keys(pack);
    for (let i = 0; i < packKeys.length; i++) {
        if (keys.indexOf(packKeys[i]) < 0) return packKeys[i];
    }
    return false;
};

// -----------------------------------checkMissing--------------------------------------
function checkMissing(obj) {
    for (const property in obj) {
        if (typeof obj[property] === 'undefined') {
            throw new Error(`Error captured in project ‘${packageJSON.name}’ at function ‘${getCallerFunctionName()}’, line${getCallerLineNum()}: MISSING ${property}`.toUpperCase());
        }
    }
}

// ---------------------------------checkMissingParam-----------------------------------
const checkMissingParam = (pack, requiredField) => {
    requiredField.forEach(field => {
        if (!pack[field]) {
            throw new Error(`Error captured in project ‘${packageJSON.name}’ at function ‘${getCallerFunctionName()}’, line${getCallerLineNum()}: MISSING ${field}`.toUpperCase());
        }
    });
};



module.exports.throwError = throwError;
module.exports.configSuccess = configSuccess;
module.exports.configResponseWithMessage = configResponseWithMessage;
module.exports.configOneHourLaterTime = configOneHourLaterTime;
module.exports.verifyUTCTime = verifyUTCTime;
module.exports.configSuccess = configSuccess;
module.exports.configFail = configFail;
module.exports.getMagicNum = getMagicNum;
module.exports.seeFirstArrayIncludeSecond = seeFirstArrayIncludeSecond;
module.exports.checkKeysExist = checkKeysExist;
module.exports.doesArrayContainsSubarray = doesArrayContainsSubarray;
module.exports.generateNonce = generateNonce;
module.exports.generateUniqueTimedToken = generateUniqueTimedToken;
module.exports.generateUniqueTimedFilename = generateUniqueTimedFilename;
module.exports.encodeUnify = encodeUnify;
module.exports.encodeStatic = encodeStatic;
module.exports.checkIllegalKey = checkIllegalKey;
module.exports.checkMissing = checkMissing;
module.exports.throwErrorWithMissingParam = throwErrorWithMissingParam;
module.exports.checkMissingParam = checkMissingParam;
